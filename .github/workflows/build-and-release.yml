name: 'build-and-release'

on:
    workflow_dispatch:
    push:
        branches:
        - releases

defaults:
    run:
        working-directory: ./muzik-offline   # Navigate to the correct directory for all steps

jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: 'macos-latest' # for Arm based macs (M1 and above).
                      args: '--target aarch64-apple-darwin'
                      rust-version: "1.77.2"
                    - platform: 'macos-latest' # for Intel based macs.
                      args: '--target x86_64-apple-darwin'
                      rust-version: "1.77.2"
                    - platform: 'ubuntu-22.04'
                      args: ''
                      rust-version: "stable"
                    - platform: 'windows-latest'
                      args: ''
                      rust-version: "stable"
    
        runs-on: ${{ matrix.platform }}
        steps:
        - uses: actions/checkout@v4
        - name: install dependencies (ubuntu only)
          if: matrix.platform == 'ubuntu-22.04' 
          # This must match the platform value defined above.
          run: |
            sudo apt-get update
            sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev
    
        - name: setup node
          uses: actions/setup-node@v4
          with:
            node-version: lts/*
            cache: 'npm' # Set this to npm, yarn or pnpm.
            cache-dependency-path: './muzik-offline/package-lock.json' # Change this to your lock file path.
    
        - name: install Rust stable
          uses: dtolnay/rust-toolchain@master # Set this to dtolnay/rust-toolchain@nightly
          with:
            # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
            targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
            toolchain: ${{ matrix.rust-version }}
    
        - name: Rust cache
          uses: swatinem/rust-cache@v2
          with:
            workspaces: './src-tauri -> target'
    
        - name: install frontend dependencies
            # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
          run: npm ci # change this to npm or pnpm depending on which one you use.

        - name: Install OpenSSL on macOS
          if: matrix.platform == 'macos-latest'
          run: brew install openssl
        
        - name: Install OpenSSL on Ubuntu
          if: matrix.platform == 'ubuntu-22.04'
          run: sudo apt-get update && sudo apt-get install -y openssl
        
        - name: Install OpenSSL on Windows
          if: matrix.platform == 'windows-latest'
          run: choco install openssl -y

        - name: Verify OpenSSL Installation
          run: openssl version

        - name: Decrypt the environment variables in src-tauri/.env.enc
          run: |
            openssl enc -d -aes-256-cbc -pbkdf2 -in src-tauri/.env.enc -out src-tauri/.env -pass pass:${{ secrets.ENCRYPTION_PASSWORD }}
    
        - uses: tauri-apps/tauri-action@v0
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
            releaseName: 'v__VERSION__-Audio Freedom LabðŸ¥¼'
            releaseBody: 'See the assets to download this version and install.'
            releaseDraft: true
            prerelease: false
            args: ${{ matrix.args }}