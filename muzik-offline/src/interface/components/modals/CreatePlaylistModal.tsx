import { EditImage } from "@assets/icons";
import { playlist, toastType } from "@muziktypes/index";
import { motion } from "framer-motion";
import { FunctionComponent, useEffect, useState } from "react";
import { local_playlists_db } from "@database/database";
import "@styles/components/modals/CreatePlaylistModal.scss";
import { invoke } from "@tauri-apps/api/core";
import { useSavedObjectStore, useToastStore } from "store";
import { modal_variants } from "@content/index";

type CreatePlaylistModalProps = {
    isOpen: boolean;
    closeModal: (arg: number | undefined) => void;
}

const CreatePlaylistModal : FunctionComponent<CreatePlaylistModalProps> = (props: CreatePlaylistModalProps) => {
    const [playlistTitle, setPlaylistTitle] = useState<string>("");
    const { setToast } = useToastStore((state) => { return { setToast: state.setToast }; });
    const [cover, setCover] = useState<string | null>(null);
    const {local_store} = useSavedObjectStore((state) => { return { local_store: state.local_store}; });

    function uploadImg(e: React.ChangeEvent<HTMLInputElement>){
        console.log(e.target.files);
        if(e.target.files === null)return;
        const image = e.target.files[0];
        const reader = new FileReader();

        reader.onload = async (e) => {
            if(e.target?.result){
                const originalData = e.target.result as string;
                setCover(originalData);
            }
        };
        reader.readAsDataURL(image);
    }

    async function createPlaylistAndCloseModal(){
        if(playlistTitle === ""){
            setToast({title: "Playlist title", message: "Playlist title cannot be empty", type: toastType.warning, timeout: 3000});
            return;
        }
        //set key of PLobj as the last key in the database + 1 or 1 if the database is empty
        const count = await local_playlists_db.playlists.count();
        const last_key = await local_playlists_db.playlists.orderBy("key").last();
        const playlistObj: playlist = {
            key: count === 0 ? 1 : last_key ? last_key.key + 1 : -1,
            uuid: "", //uuid will be generated by the database
            cover: null,//cover uuid will be generated by the database
            title: playlistTitle,
            dateCreated: new Date().toLocaleDateString(),
            dateEdited: new Date().toLocaleDateString(),
            tracksPaths: []
        }
        await local_playlists_db.playlists.add(playlistObj);
        props.closeModal(playlistObj.key);
        if(cover === null)return;

        let toSend = "";
        
        if(cover.startsWith("data:image/jpeg;base64,")){
            //remove the header of the image
            toSend = cover.replace("data:image/jpeg;base64,", "");
        }
        else if (cover.startsWith("data:image/png;base64,")){
            //remove the header of the image
            toSend = cover.replace("data:image/png;base64,", "");
        }
        // Compress the image to a maximum size of 250x250
        if(toSend === ""){
            setToast({title: "Processing error...", message: "Could not process this image, please try another image", type: toastType.error, timeout: 3000});
            return;
        }

        invoke("create_playlist_cover", {playlistName: playlistTitle, cover: toSend, compressImage: local_store.CompressImage === "Yes" ? true : false})
            .then((cover_uuid: any) => {
                local_playlists_db.playlists.update(playlistObj.key, {cover: cover_uuid, uuid: cover_uuid});
                setToast({title: "Playlist cover", message: "Successfully created playlist", type: toastType.success, timeout: 3000});
            })
            .catch((error: any) => {
                console.log(error);
                setToast({title: "Playlist cover", message: "Failed to set playlist cover", type: toastType.error, timeout: 3000});
            });
    }
    
    useEffect(() => { setPlaylistTitle(""); setCover(null); }, [props.isOpen])

    return (
        <div className={"CreatePlaylistModal" + (props.isOpen ? " CreatePlaylistModal-visible" : "")} onClick={
            (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => 
                {if(e.target === e.currentTarget)props.closeModal(undefined)}}>
            <motion.div 
            animate={props.isOpen ? "open" : "closed"}
            variants={modal_variants}
            className="modal">
                <h1>Create a playlist</h1>
                <div className="playlist_image">
                    <div className="playlist_img">
                        { cover === null ? <div className="blank_cover"/> : <img src={cover} alt="playlist_img"/> }
                    </div>
                    <motion.label className="EditImageicon" whileTap={{scale: 0.97}}>
                        <input name="EditImageicon-img" type="file" accept="image/png, image/jpeg" onChange={uploadImg}/>
                        <EditImage />
                    </motion.label>
                </div>
                <h3>Playlist name</h3>
                <input type="text" id="input-field" placeholder="enter playlist name here" value={playlistTitle} onChange={(e) => setPlaylistTitle(e.target.value)}/>
                <motion.div className="create_playlist" whileTap={{scale: 0.98}} onClick={createPlaylistAndCloseModal}>create playlist</motion.div>
                <motion.div className="cancel_creation" whileTap={{scale: 0.98}} onClick={() => props.closeModal(undefined)}>cancel</motion.div>
            </motion.div>
        </div>
    )
}

export default CreatePlaylistModal